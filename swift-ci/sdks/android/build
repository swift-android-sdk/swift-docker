#!/bin/bash -e
# Swift Android SDK: Top-level Build Script

# default architectures to build for
TARGET_ARCHS=${TARGET_ARCHS:-aarch64,x86_64,armv7}

ANDROID_NDK_VERSION=android-ndk-r27c
ANDROID_API=28

SDKROOT=${RUNNER_TEMP:-${TMPDIR:-'/tmp'}}/swift-android-sdk
mkdir -p ${SDKROOT}

# Install a Swift host toolchain if it isn't already present
SWIFT_ROOT=${SDKROOT}/host-toolchain
HOST_OS=ubuntu$(lsb_release -sr)
SWIFT_VERSION=6.1
SWIFT_TAG="swift-${SWIFT_VERSION}-RELEASE"
SWIFT_BRANCH="swift-$(echo $SWIFT_TAG | cut -d- -f2)-release"
SWIFT_BASE=$SWIFT_TAG-$HOST_OS

if [[ ! -d $SWIFT_ROOT ]]; then
    mkdir -p $SWIFT_ROOT
    pushd $SWIFT_ROOT

    SWIFT_URL="https://download.swift.org/$SWIFT_BRANCH/$(echo $HOST_OS | tr -d '.')/$SWIFT_TAG/$SWIFT_BASE.tar.gz"
    wget -q $SWIFT_URL
    tar xzf $SWIFT_BASE.tar.gz

    popd
fi

#HOST_TOOLCHAIN=${HOST_TOOLCHAIN:-$(dirname $(dirname $(which swiftc)))}
HOST_TOOLCHAIN=$SWIFT_ROOT/$SWIFT_BASE/usr
$HOST_TOOLCHAIN/bin/swift --version

# ensure the correct Swift is first in the PATH
export PATH=$HOST_TOOLCHAIN/bin:$PATH

export ANDROID_NDK_HOME=${SDKROOT}/ndk/${ANDROID_NDK_VERSION}
export ANDROID_NDK=${ANDROID_NDK_HOME}

if [[ ! -d ${ANDROID_NDK_HOME} ]]; then
    mkdir -p $(dirname ${ANDROID_NDK_HOME})
    pushd $(dirname ${ANDROID_NDK_HOME})
    NDKFILE=$(basename $ANDROID_NDK_HOME)-linux.zip
    wget -q https://dl.google.com/android/repository/${NDKFILE}
    unzip -q ${NDKFILE}
    popd
fi

mkdir -p ${SDKROOT}/products

# Check-out the sources
if [[ ! -d ${SDKROOT}/src ]]; then
    scripts/fetch-source.sh --source-dir ${SDKROOT}/src --swift-tag ${SWIFT_TAG}
fi

# fetch and apply the patches
PATCHDIR=${SDKROOT}/patches
if [[ ! -d ${PATCHDIR} ]]; then
    git clone https://github.com/finagolfin/swift-android-sdk.git ${PATCHDIR}

    # TODO: need to selectively apply patches based on release or not release
    pushd ${SDKROOT}/src/swift-project
        echo "Applying patches"

        # patch the patch, which seems to only be needed for an API less than 28 
        # https://github.com/finagolfin/swift-android-sdk/blob/main/swift-android.patch#L110
        perl -pi -e 's/#if os\(Windows\)/#if os\(Android\)/g' $PATCHDIR/swift-android.patch

        # remove the need to link in android-execinfo
        perl -pi -e 's/dispatch android-execinfo/dispatch/g' $PATCHDIR/swift-android.patch

        git apply -v $PATCHDIR/swift-android.patch
        # swift-android-ci.patch is not needed, since it is only used for llbuild, etc.
        #git apply -C1 $PATCHDIR/swift-android-ci.patch
        git apply -v $PATCHDIR/swift-android-ci-release.patch
        git apply -v $PATCHDIR/swift-android-testing-release.patch

        perl -pi -e 's%String\(cString: getpass%\"fake\" //%' swiftpm/Sources/PackageRegistryCommand/PackageRegistryCommand+Auth.swift
        # disable backtrace() for Android (needs either API33+ or libandroid-execinfo, or to manually add in backtrace backport)
        perl -pi -e 's/os\(Android\)/os\(AndroidDISABLED\)/g' swift-testing/Sources/Testing/SourceAttribution/Backtrace.swift

        # need to un-apply libandroid-spawn since we don't need it for API28+
        perl -pi -e 's/MATCHES "Android"/MATCHES "AndroidDISABLED"/g' llbuild/lib/llvm/Support/CMakeLists.txt
        perl -pi -e 's/ STREQUAL Android\)/ STREQUAL AndroidDISABLED\)/g' swift-corelibs-foundation/Sources/Foundation/CMakeLists.txt
    popd
fi

./scripts/build.sh --products-dir ${SDKROOT}/products --source-dir ${SDKROOT}/src --build-dir ${SDKROOT}/build --ndk-home ${ANDROID_NDK_HOME} --android-api ${ANDROID_API} --host-toolchain ${HOST_TOOLCHAIN} --archs ${TARGET_ARCHS}

