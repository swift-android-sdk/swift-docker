#!/bin/bash -e
#
# ===----------------------------------------------------------------------===
#
#  Swift Android SDK: Local (non-Docker-containerized) Build Script
#
# ===----------------------------------------------------------------------===

# default architectures to build for
TARGET_ARCHS=${TARGET_ARCHS:-aarch64,x86_64,armv7}

ANDROID_NDK_VERSION=android-ndk-r27c
ANDROID_API=28

SDKROOT=${RUNNER_TEMP:-${TMPDIR:-'/tmp'}}/swift-android-sdk
mkdir -p ${SDKROOT}

# Install a Swift host toolchain if it isn't already present
HOST_OS=ubuntu$(lsb_release -sr)
source ./scripts/toolchain-vars.sh

SWIFT_ROOT=${SDKROOT}/host-toolchain
if [[ ! -d "$SWIFT_ROOT/$SWIFT_BASE" ]]; then
    mkdir -p $SWIFT_ROOT
    pushd $SWIFT_ROOT

    wget -q $SWIFT_TOOLCHAIN_URL
    tar xzf $SWIFT_BASE.tar.gz

    popd
fi

#HOST_TOOLCHAIN=${HOST_TOOLCHAIN:-$(dirname $(dirname $(which swiftc)))}
HOST_TOOLCHAIN=$SWIFT_ROOT/$SWIFT_BASE/usr
$HOST_TOOLCHAIN/bin/swift --version

# ensure the correct Swift is first in the PATH
export PATH=$HOST_TOOLCHAIN/bin:$PATH

export ANDROID_NDK_HOME=${SDKROOT}/ndk/${ANDROID_NDK_VERSION}

if [[ ! -d ${ANDROID_NDK_HOME} ]]; then
    mkdir -p $(dirname ${ANDROID_NDK_HOME})
    pushd $(dirname ${ANDROID_NDK_HOME})
    NDKFILE=$(basename $ANDROID_NDK_HOME)-linux.zip
    wget -q https://dl.google.com/android/repository/${NDKFILE}
    unzip -q ${NDKFILE}
    popd
fi

mkdir -p ${SDKROOT}/products

./scripts/fetch-source.sh --source-dir ${SDKROOT}/source --swift-tag ${SWIFT_TAG}
./scripts/patch-sources.sh ${SDKROOT}/source

./scripts/build.sh \
    --source-dir ${SDKROOT}/source \
    --products-dir ${SDKROOT}/products
    --build-dir ${SDKROOT}/build \
    --host-toolchain ${HOST_TOOLCHAIN} \
    --android-api ${ANDROID_API} \
    --ndk-home ${ANDROID_NDK_HOME} \
    --archs ${TARGET_ARCHS} ${@}
